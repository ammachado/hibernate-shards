import org.apache.tools.ant.filters.ReplaceTokens

/*
 * Hibernate, Relational Persistence for Idiomatic Java
 *
 * License: GNU Lesser General Public License (LGPL), version 2.1 or later.
 * See the lgpl.txt file in the root directory or <http://www.gnu.org/licenses/lgpl-2.1.html>.
 */

buildscript {
    repositories {
        mavenCentral()
        mavenLocal()
        jcenter()
        maven {
            name "jboss-snapshots"
            url "http://snapshots.jboss.org/maven2/"
        }
    }
    dependencies {
        classpath 'org.hibernate.build.gradle:gradle-maven-publish-auth:2.0.1'
        classpath 'org.hibernate.build.gradle:hibernate-matrix-testing:2.0.0-SNAPSHOT'
        classpath 'org.hibernate.build.gradle:version-injection-plugin:1.0.0'
        classpath 'org.hibernate.build.gradle:gradle-xjc-plugin:1.0.2.Final'
        classpath 'com.github.lburgazzoli:lb-karaf-features-gen:1.0.0-SNAPSHOT'
        classpath 'org.asciidoctor:asciidoctor-gradle-plugin:1.5.2'
        classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:1.7.3'
        //classpath 'org.hibernate.build.gradle:gradle-upload-auth-plugin:1.1.1'
        //classpath "org.jboss.jdocbook:gradle-jdocbook:1.2.1"
    }
}

plugins {
    id 'com.gradle.build-scan' version '1.9'
    id 'me.champeau.buildscan-recipes' version '0.1.7'
}

version = '5.3.0-SNAPSHOT'
buildDir = "target"

allprojects {
    repositories {
        mavenCentral()
        mavenLocal()
        maven {
            name "jboss-snapshots"
            url "http://snapshots.jboss.org/maven2/"
        }
    }

    // minimize changes, at least for now (gradle uses 'build' by default)..
    buildDir = "target"

    apply from: rootProject.file( 'gradle/base-information.gradle' )
}

apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'maven'
//apply plugin: 'uploadAuth'
//apply plugin: 'jdocbook'
apply from: "./libraries.gradle"


idea {
    project {
        languageLevel = '1.8'
        ipr {
            withXml { provider ->
                provider.node.component.find { it.@name == 'VcsDirectoryMappings' }.mapping.@vcs = 'Git'
                def maxHeapSizeConfig =  provider.node.component.find { it.@name == 'JavacSettings' }
                if( maxHeapSizeConfig == null ){
                    def javacSettingsNode =  provider.node.appendNode('component',[name: 'JavacSettings'])
                    javacSettingsNode.appendNode('option', [name:"MAXIMUM_HEAP_SIZE", value:"512"])
                }
            }
            beforeMerged { project ->
                project.modulePaths.clear()
            }
        }
    }
    module {
        name = "hibernate-shards"
    }
}

// set up special classpath elements ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
configurations {
    jbossLoggingTool {
        description = "Dependencies for running the JBoss logging AnnotationProcessor tool"
    }
    deployerJars {
        description = 'Jars needed for doing deployment to JBoss Nexus repo'
    }
    // for all imported dependencies, exclude xml-apis (which are jdk specific) from transitivity
    all*.exclude group: 'xml-apis', module: 'xml-apis'
}

// declare dependencies ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
dependencies {
    compile( libraries.hibernate_orm )
    testCompile( libraries.hibernate_testing )
    testCompile( libraries.hsqldb )
    testCompile( libraries.mockito )
    testRuntime( libraries.slf4j_api )
    testRuntime( libraries.slf4j_log4j12 )
    testRuntime( libraries.jcl_slf4j )
    testRuntime( libraries.jcl_api )
    testRuntime( libraries.jcl )

//    jdocbookXsl( libraries.pressgang_xslt )
//    jdocbookXsl( libraries.pressgang_fonts )
//    jdocbookStyles( libraries.pressgang_style )

    jbossLoggingTool( libraries.logging_processor )

    deployerJars( 'org.apache.maven.wagon:wagon-http:1.0' )
}

//jdocbook {
//    // apply shared formatting config ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//    format('html_single') {
//        finalName = "index.html"
//        stylesheet = "classpath:/xslt/org/hibernate/jdocbook/xslt/xhtml-single.xsl"
//    }
//    format('html') {
//        finalName = "index.html"
//        stylesheet = "classpath:/xslt/org/hibernate/jdocbook/xslt/xhtml.xsl"
//    }
//    reference {
//        masterSourceDocumentName = 'master.xml'
//        useRelativeImageUris = false
//    }
//}
//
//stageStyles_reference.doLast {
//    logger.lifecycle( "Staging style resources")
//    copy {
//        into project.file( "${project.buildDir}/docbook/stage/reference/images" )
//        from project.file( 'src/main/docbook/reference/en-US' )
//        include '**/images/*.png'
//        includeEmptyDirs = false
//    }
//    copy {
//        into project.file( "${project.buildDir}/docbook/stage/reference" )
//        from project.file( 'src/main/docbook/style' )
//        includeEmptyDirs = false
//    }
//}

// Configure test task ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
test {
    systemProperties['hibernate.test.validatefailureexpected'] = true
    systemProperties += System.properties.findAll { it.key.startsWith( "hibernate.") }
    maxHeapSize = "1024m"
}

processTestResources.doLast( {
    copy {
        from( sourceSets.test.java.srcDirs ) {
            include '**/*.properties'
            include '**/*.xml'
        }
        into sourceSets.test.output.classesDir
    }
} )

// Set up jar manifest information ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
jar {
    manifest {
        attributes(
                provider: 'gradle',
                'Implementation-Url': 'http://hibernate.org',
                'Implementation-Version': version,
                'Implementation-Vendor': 'Hibernate.org',
                'Implementation-Vendor-Id': 'org.hibernate'
        )
    }
}

// Prepare upload and install tasks (including POM information) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
task sourcesJar(type: Jar, dependsOn: compileJava) {
    from sourceSets.main.allSource
    classifier = 'sources'
}

artifacts {
    archives sourcesJar
}

uploadArchives.dependsOn sourcesJar

def pomConfig = {
    name 'Hibernate Shards'
    description 'Horizontal partitioning for Hibernate O/RM'
    url 'http://hibernate.org'
    organization {
        name 'Hibernate.org'
        url 'http://hibernate.org'
    }
    issueManagement {
        system 'jira'
        url 'https://hibernate.onjira.com/browse/HSHARDS'
    }
    scm {
        url "http://github.com/hibernate/hibernate-shards"
        connection "scm:git:http://github.com/hibernate/hibernate-shards.git"
        developerConnection "scm:git:git@github.com:hibernate/hibernate-shards.git"
    }
    licenses {
        license {
            name 'GNU Lesser General Public License'
            url 'http://www.gnu.org/licenses/lgpl-2.1.html'
            comments 'See discussion at http://hibernate.org/license for more details.'
            distribution 'repo'
        }
    }
    developers {
        developer {
            id 'hibernate-team'
            name 'The Hibernate Development Team'
            organization 'Hibernate.org'
            organizationUrl 'http://hibernate.org'
        }
    }
}

configure(install.repositories.mavenInstaller) {
    pom.project pomConfig
}

uploadArchives {
    repositories.mavenDeployer {
        name = 'jbossDeployer'
        configuration = configurations.deployerJars
        pom.project pomConfig
        repository(id: "jboss-releases-repository", url: "https://repository.jboss.org/nexus/service/local/staging/deploy/maven2/")
        snapshotRepository(id: "jboss-snapshots-repository", url: "https://repository.jboss.org/nexus/content/repositories/snapshots")
    }
}

// Configure gradlew generation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
task wrapper(type: Wrapper) {
    gradleVersion = '4.6'
    distributionType = 'ALL'
}

buildScan {
    licenseAgreementUrl = 'https://gradle.com/terms-of-service'
    licenseAgree = 'yes'

    recipe 'git-commit', baseUrl: 'https://github.com/hibernate/hibernate-orm/tree'
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
    //compileJava.options.define(compilerArgs: ["-proc:none", "-encoding", "UTF-8"])
    //compileTestJava.options.define(compilerArgs: ["-proc:none", "-encoding", "UTF-8"])
}

sourceCompatibility = "1.8"
targetCompatibility = "1.8"
